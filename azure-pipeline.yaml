# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- azure-terraform

pool:
  vmImage: ubuntu-latest

steps:
- task: TerraformInstaller@1
  displayName: Installing terraform
  inputs:
    terraformVersion: 'latest'

- task: AzureKeyVault@2
  displayName: Download terraform backend sas token from key-vault
  inputs:
    azureSubscription: 'backendterraconn'
    KeyVaultName: 'terra-vault1990'
    SecretsFilter: 'terra-token'
    RunAsPreJob: true
- task: TerraformTaskV4@4
  displayName: Terraform Init task
  inputs:
  
    provider: 'azurerm'
    command: 'init'
    backendServiceArm: 'backendterraconn'
    backendAzureRmResourceGroupName: 'gen-rgp'
    backendAzureRmStorageAccountName: 'chaosgenstore1990'
    backendAzureRmContainerName: 'terra'
    backendAzureRmKey: 'terra.tfstate'
    backendAzureRmSasToken: $(terra-token)

- task: TerraformTaskV4@4
  displayName: Terraform plan
  inputs:
    provider: 'azurerm'
    command: 'plan'
    commandOptions: '--var-file general-var.tfvars --out=gen-plan.tfplan'
    environmentServiceNameAzureRM: 'backendterraconn'

- task: TerraformTaskV4@4
  displayName: Terraform Apply
  inputs:
    provider: 'azurerm'
    command: 'apply'
    commandOptions: '--auto-approve gen-plan.tfplan'
    environmentServiceNameAzureRM: 'backendterraconn'

